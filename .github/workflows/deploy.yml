name: ðŸš€ Deploy MediSlot Application (Railway + Vercel)

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  # Ensure this workflow has priority
  repository_dispatch:
    types: [deploy]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  disable-github-pages:
    runs-on: ubuntu-latest
    steps:
    - name: Disable GitHub Pages
      run: |
        echo "Ensuring GitHub Pages is disabled for this repository"
        echo "This deployment uses Railway and Vercel instead of GitHub Pages"

  build-and-test:
    runs-on: ubuntu-latest
    needs: disable-github-pages
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'MediSlot_App/UI/project/package-lock.json'

    - name: Build and test microservices
      run: |
        cd MediSlot_App/microservices
        
        # Build services with pom.xml in root of service directory
        for service in */; do
          if [ -f "$service/pom.xml" ]; then
            echo "Building $service"
            cd "$service"
            mvn clean package -DskipTests
            cd ..
          fi
        done
        
        # Build services with nested pom.xml files
        if [ -f "feedback/feedback/pom.xml" ]; then
          echo "Building feedback service"
          cd feedback/feedback
          mvn clean package -DskipTests
          cd ../..
        fi
        
        if [ -f "SpringPrescription/demo/pom.xml" ]; then
          echo "Building prescription service"
          cd SpringPrescription/demo
          mvn clean package -DskipTests
          cd ../..
        fi

    - name: Build frontend
      run: |
        cd MediSlot_App/UI/project
        npm ci
        npm run build

    - name: Run tests
      run: |
        cd MediSlot_App/microservices
        
        # Test services with pom.xml in root of service directory
        for service in */; do
          if [ -f "$service/pom.xml" ]; then
            echo "Testing $service"
            cd "$service"
            mvn test
            cd ..
          fi
        done
        
        # Test services with nested pom.xml files
        if [ -f "feedback/feedback/pom.xml" ]; then
          echo "Testing feedback service"
          cd feedback/feedback
          mvn test
          cd ../..
        fi
        
        if [ -f "SpringPrescription/demo/pom.xml" ]; then
          echo "Testing prescription service"
          cd SpringPrescription/demo
          mvn test
          cd ../..
        fi

  setup-railway-project:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      database_url: ${{ steps.get_db_url.outputs.database_url }}
      project_id: ${{ steps.create_project.outputs.project_id }}
      db_service_id: ${{ steps.add_db.outputs.db_service_id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Railway CLI
      run: npm install -g @railway/cli

    - name: Login to Railway
      run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

    - name: Create Railway Project
      id: create_project
      run: |
        PROJECT_NAME="MediSlot-Backend"
        PROJECT_ID=$(railway project list --json | jq -r ".[] | select(.name == \"$PROJECT_NAME\") | .id")
        if [ -z "$PROJECT_ID" ]; then
          echo "Creating new Railway project: $PROJECT_NAME"
          PROJECT_ID=$(railway project create --name "$PROJECT_NAME" --json | jq -r '.id')
        else
          echo "Using existing Railway project: $PROJECT_ID"
        fi
        echo "::set-output name=project_id::$PROJECT_ID"
        echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

    - name: Add PostgreSQL Database
      id: add_db
      run: |
        DB_SERVICE_ID=$(railway service create --project ${{ steps.create_project.outputs.project_id }} --name "Postgres" --type "postgresql" --json | jq -r '.id')
        echo "::set-output name=db_service_id::$DB_SERVICE_ID"
        echo "DB_SERVICE_ID=$DB_SERVICE_ID" >> $GITHUB_ENV
        echo "Database service created: $DB_SERVICE_ID"

    - name: Get Railway Postgres Connection String
      id: get_db_url
      run: |
        DB_URL=$(railway variables get DATABASE_URL --service ${{ steps.add_db.outputs.db_service_id }} --project ${{ steps.create_project.outputs.project_id }})
        echo "::set-output name=database_url::$DB_URL"
        echo "DATABASE_URL=$DB_URL" >> $GITHUB_ENV

  deploy-service-registry:
    needs: [build-and-test, setup-railway-project]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      service_registry_url: ${{ steps.deploy_registry.outputs.service_registry_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Railway CLI
      run: npm install -g @railway/cli

    - name: Login to Railway
      run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

    - name: Deploy Service Registry
      id: deploy_registry
      run: |
        SERVICE_ID=$(railway service create --project ${{ needs.setup-railway-project.outputs.project_id }} --name "service-registry" --json | jq -r '.id')
        railway variables set --service $SERVICE_ID SPRING_PROFILES_ACTIVE=prod
        railway variables set --service $SERVICE_ID PORT=8761
        railway up --service $SERVICE_ID --path ./MediSlot_App/microservices/service-registry
        SERVICE_URL=$(railway service show --service $SERVICE_ID --json | jq -r '.url')
        echo "::set-output name=service_registry_url::$SERVICE_URL"
        echo "Service Registry deployed: $SERVICE_URL"

  deploy-api-gateway:
    needs: [build-and-test, setup-railway-project, deploy-service-registry]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      api_gateway_url: ${{ steps.deploy_gateway.outputs.api_gateway_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Railway CLI
      run: npm install -g @railway/cli

    - name: Login to Railway
      run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

    - name: Deploy API Gateway
      id: deploy_gateway
      run: |
        SERVICE_ID=$(railway service create --project ${{ needs.setup-railway-project.outputs.project_id }} --name "api-gateway" --json | jq -r '.id')
        railway variables set --service $SERVICE_ID SPRING_PROFILES_ACTIVE=prod
        railway variables set --service $SERVICE_ID EUREKA_URL=https://${{ needs.deploy-service-registry.outputs.service_registry_url }}/eureka/
        railway variables set --service $SERVICE_ID FRONTEND_URL=https://${{ secrets.VERCEL_FRONTEND_URL }}.vercel.app
        railway up --service $SERVICE_ID --path ./MediSlot_App/microservices/api-gateway
        SERVICE_URL=$(railway service show --service $SERVICE_ID --json | jq -r '.url')
        echo "::set-output name=api_gateway_url::$SERVICE_URL"
        echo "API Gateway deployed: $SERVICE_URL"

  deploy-microservices:
    needs: [build-and-test, setup-railway-project, deploy-service-registry]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    strategy:
      matrix:
        service: [appointment, doctor, patient, feedback, report, prescription]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Railway CLI
      run: npm install -g @railway/cli

    - name: Login to Railway
      run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

    - name: Deploy ${{ matrix.service }} Service
      env:
        DATABASE_URL: ${{ needs.setup-railway-project.outputs.database_url }}
        PROJECT_ID: ${{ needs.setup-railway-project.outputs.project_id }}
        SERVICE_REGISTRY_URL: ${{ needs.deploy-service-registry.outputs.service_registry_url }}
      run: |
        if [ "${{ matrix.service }}" = "feedback" ]; then
          SERVICE_PATH="./MediSlot_App/microservices/feedback/feedback"
        elif [ "${{ matrix.service }}" = "prescription" ]; then
          SERVICE_PATH="./MediSlot_App/microservices/SpringPrescription/demo"
        else
          SERVICE_PATH="./MediSlot_App/microservices/${{ matrix.service }}"
        fi
        SERVICE_ID=$(railway service create --project $PROJECT_ID --name "${{ matrix.service }}-service" --json | jq -r '.id')
        railway variables set --service $SERVICE_ID SPRING_PROFILES_ACTIVE=prod
        railway variables set --service $SERVICE_ID EUREKA_URL=https://$SERVICE_REGISTRY_URL/eureka/
        railway variables set --service $SERVICE_ID DATABASE_URL="$DATABASE_URL"
        railway up --service $SERVICE_ID --path $SERVICE_PATH
        echo "${{ matrix.service }} service deployed successfully"

  deploy-frontend:
    needs: [build-and-test, deploy-api-gateway]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'MediSlot_App/UI/project/package-lock.json'

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Deploy to Vercel
      env:
        API_GATEWAY_URL: ${{ needs.deploy-api-gateway.outputs.api_gateway_url }}
      run: |
        cd MediSlot_App/UI/project
        echo "VITE_API_BASE_URL=https://$API_GATEWAY_URL" >> .env
        vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes
        echo "Frontend deployed successfully"

  health-check:
    needs: [deploy-service-registry, deploy-api-gateway, deploy-microservices, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Check Service Registry Health
      run: |
        curl -f https://${{ needs.deploy-service-registry.outputs.service_registry_url }}/actuator/health || exit 1
        echo "Service Registry is healthy"

    - name: Check API Gateway Health
      run: |
        curl -f https://${{ needs.deploy-api-gateway.outputs.api_gateway_url }}/actuator/health || exit 1
        echo "API Gateway is healthy"

    - name: Check Frontend
      run: |
        curl -f https://${{ secrets.VERCEL_FRONTEND_URL }}.vercel.app || exit 1
        echo "Frontend is accessible"

    - name: Deployment Summary
      run: |
        echo "ðŸŽ‰ Deployment Complete!"
        echo "Frontend: https://${{ secrets.VERCEL_FRONTEND_URL }}.vercel.app"
        echo "API Gateway: https://${{ needs.deploy-api-gateway.outputs.api_gateway_url }}"
        echo "Service Registry: https://${{ needs.deploy-service-registry.outputs.service_registry_url }}"
        echo "Database: Managed in Railway" 